// Generated by gencpp from file eyes/Autonomous.msg
// DO NOT EDIT!


#ifndef EYES_MESSAGE_AUTONOMOUS_H
#define EYES_MESSAGE_AUTONOMOUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eyes
{
template <class ContainerAllocator>
struct Autonomous_
{
  typedef Autonomous_<ContainerAllocator> Type;

  Autonomous_()
    : safety(false)
    , left_forward(false)
    , right_forward(false)
    , left_speed(0)
    , right_speed(0)  {
    }
  Autonomous_(const ContainerAllocator& _alloc)
    : safety(false)
    , left_forward(false)
    , right_forward(false)
    , left_speed(0)
    , right_speed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _safety_type;
  _safety_type safety;

   typedef uint8_t _left_forward_type;
  _left_forward_type left_forward;

   typedef uint8_t _right_forward_type;
  _right_forward_type right_forward;

   typedef int16_t _left_speed_type;
  _left_speed_type left_speed;

   typedef int16_t _right_speed_type;
  _right_speed_type right_speed;





  typedef boost::shared_ptr< ::eyes::Autonomous_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eyes::Autonomous_<ContainerAllocator> const> ConstPtr;

}; // struct Autonomous_

typedef ::eyes::Autonomous_<std::allocator<void> > Autonomous;

typedef boost::shared_ptr< ::eyes::Autonomous > AutonomousPtr;
typedef boost::shared_ptr< ::eyes::Autonomous const> AutonomousConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eyes::Autonomous_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eyes::Autonomous_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace eyes

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'eyes': ['/home/anonymous3/anon_auton_ws/src/eyes/msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::eyes::Autonomous_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eyes::Autonomous_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eyes::Autonomous_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eyes::Autonomous_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eyes::Autonomous_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eyes::Autonomous_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eyes::Autonomous_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cbf5bb4d4e0610600c1d61a65d9f85d";
  }

  static const char* value(const ::eyes::Autonomous_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cbf5bb4d4e06106ULL;
  static const uint64_t static_value2 = 0x00c1d61a65d9f85dULL;
};

template<class ContainerAllocator>
struct DataType< ::eyes::Autonomous_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eyes/Autonomous";
  }

  static const char* value(const ::eyes::Autonomous_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eyes::Autonomous_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool safety\n"
"bool left_forward\n"
"bool right_forward\n"
"int16 left_speed\n"
"int16 right_speed\n"
;
  }

  static const char* value(const ::eyes::Autonomous_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eyes::Autonomous_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.safety);
      stream.next(m.left_forward);
      stream.next(m.right_forward);
      stream.next(m.left_speed);
      stream.next(m.right_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Autonomous_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eyes::Autonomous_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eyes::Autonomous_<ContainerAllocator>& v)
  {
    s << indent << "safety: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safety);
    s << indent << "left_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_forward);
    s << indent << "right_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_forward);
    s << indent << "left_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_speed);
    s << indent << "right_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EYES_MESSAGE_AUTONOMOUS_H
